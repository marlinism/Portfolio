{"ast":null,"code":"var _class;\nimport { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nexport default class ScrollService {\n  constructor() {\n    this.scrollToContact = () => {\n      let contactMeScreen = document.getElementById(\"Contact\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n        case \"complete\":\n          return completelyVisible;\n        default:\n          return false;\n      }\n    };\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n}\n_class = ScrollService;\nScrollService.scrollHandler = new _class();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToContact","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","_class","scrollHandler"],"sources":["/Users/marlin/Desktop/marlinism.github.io/portpolio/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\n\nexport default class ScrollService {\n  static scrollHandler = new ScrollService();\n\n  static currentScreenBroadCaster = new Subject();\n  static currentScreenFadeIn = new Subject();\n\n  constructor() {\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n  scrollToContact = () => {\n    let contactMeScreen = document.getElementById(\"Contact\");\n    if (!contactMeScreen) return;\n    contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\n  }\n  scrollToHome = () => {\n    let homeScreen = document.getElementById(\"Home\");\n    if (!homeScreen) return;\n    homeScreen.scrollIntoView({ behavior: \"smooth\" });\n  }\n  isElementInView = (elem, type) => {\n    let rec = elem.getBoundingClientRect();\n    let elementTop = rec.top;\n    let elementBottom = rec.Bottom;\n\n    let partiallyVisible =\n      elementTop < window.innerHeight && elementBottom >= 0;\n    let completelyVisible =\n      elementTop >= 0 && elementBottom <= window.innerHeight;\n\n    switch (type) {\n      case \"partial\":\n        return partiallyVisible;\n\n      case \"complete\":\n        return completelyVisible;\n      default:\n        return false;\n    }\n  }\n\n  checkCurrentScreenUnderViewport = (event) => {\n    if(!event || Object.keys(event).length < 1)\n    return;\n    for(let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if(!screenFromDOM)\n        continue;\n\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n        if(fullyVisible || partiallyVisible) {\n            if(partiallyVisible && !screen.alreadyRendered) {\n                ScrollService.currentScreenFadeIn.next({\n                    fadeInScreen: screen.screen_name\n                });\n                screen['alreadyRendered'] = true;\n                break;\n            }\n            if(fullyVisible) {\n                ScrollService.currentScreenBroadCaster.next({\n                    screenInView: screen.screen_name\n                });\n                break;\n            }\n        }\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,SAASC,OAAO,QAAQ,MAAM;AAE9B,eAAe,MAAMC,aAAa,CAAC;EAMjCC,WAAWA,CAAA,EAAG;IAAA,KAGdC,eAAe,GAAG,MAAM;MACtB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;MACxD,IAAI,CAACF,eAAe,EAAE;MACtBA,eAAe,CAACG,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACxD,CAAC;IAAA,KACDC,YAAY,GAAG,MAAM;MACnB,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAChD,IAAI,CAACI,UAAU,EAAE;MACjBA,UAAU,CAACH,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACnD,CAAC;IAAA,KACDG,eAAe,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAK;MAChC,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAqB,CAAC,CAAC;MACtC,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAAG;MACxB,IAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAM;MAE9B,IAAIC,gBAAgB,GAClBJ,UAAU,GAAGK,MAAM,CAACC,WAAW,IAAIJ,aAAa,IAAI,CAAC;MACvD,IAAIK,iBAAiB,GACnBP,UAAU,IAAI,CAAC,IAAIE,aAAa,IAAIG,MAAM,CAACC,WAAW;MAExD,QAAQT,IAAI;QACV,KAAK,SAAS;UACZ,OAAOO,gBAAgB;QAEzB,KAAK,UAAU;UACb,OAAOG,iBAAiB;QAC1B;UACE,OAAO,KAAK;MAChB;IACF,CAAC;IAAA,KAEDC,+BAA+B,GAAIC,KAAK,IAAK;MAC3C,IAAG,CAACA,KAAK,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,GAAG,CAAC,EAC1C;MACA,KAAI,IAAIC,MAAM,IAAI9B,aAAa,EAAE;QAC7B,IAAI+B,aAAa,GAAGzB,QAAQ,CAACC,cAAc,CAACuB,MAAM,CAACE,WAAW,CAAC;QAC/D,IAAG,CAACD,aAAa,EACjB;QAEA,IAAIE,YAAY,GAAG,IAAI,CAACrB,eAAe,CAACmB,aAAa,EAAE,UAAU,CAAC;QAClE,IAAIV,gBAAgB,GAAG,IAAI,CAACT,eAAe,CAACmB,aAAa,EAAE,SAAS,CAAC;QAErE,IAAGE,YAAY,IAAIZ,gBAAgB,EAAE;UACjC,IAAGA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAAe,EAAE;YAC5ChC,aAAa,CAACiC,mBAAmB,CAACC,IAAI,CAAC;cACnCC,YAAY,EAAEP,MAAM,CAACE;YACzB,CAAC,CAAC;YACFF,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI;YAChC;UACJ;UACA,IAAGG,YAAY,EAAE;YACb/B,aAAa,CAACoC,wBAAwB,CAACF,IAAI,CAAC;cACxCG,YAAY,EAAET,MAAM,CAACE;YACzB,CAAC,CAAC;YACF;UACJ;QACJ;MACJ;IACF,CAAC;IA5DCV,MAAM,CAACkB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACf,+BAA+B,CAAC;EACzE;AA4DF;AAACgB,MAAA,GApEoBvC,aAAa;AAAbA,aAAa,CACzBwC,aAAa,GAAG,IAAIxC,MAAa,CAAC,CAAC;AADvBA,aAAa,CAGzBoC,wBAAwB,GAAG,IAAIrC,OAAO,CAAC,CAAC;AAH5BC,aAAa,CAIzBiC,mBAAmB,GAAG,IAAIlC,OAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}